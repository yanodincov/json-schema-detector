---
description: 
globs: 
alwaysApply: false
---
GO_UNIT_TESTING_POLICY
    1_PURPOSE
        BUSINESS_LOGIC_CORRECTNESS_VERIFICATION
        TEST_CHANGES_CONSCIOUS_AND_DOCUMENTED
    2_FILE_STRUCTURE_NAMING
        FILE_NAME_CONVENTION: <name>_test.go (e.g., get_user.go -> get_user_test.go)
        PACKAGE_CONVENTION: filepackage_test (external_package)
        TEST_FUNCTION_SIGNATURE: func TestXxx(t *testing.T)
        T_PARALLEL_USAGE: AT_BEGINNING_OF_EACH_TEST
        T_HELPER_USAGE: IN_UTILITY_FUNCTIONS
        TEST_STYLES
            TEST_CASE_NAMING_LANGUAGE: ENGLISH_ONLY (MANDATORY)
                TABLE_DRIVEN_TEST_CASE_NAMES: ENGLISH_ONLY
                T_RUN_CASE_NAMES: ENGLISH_ONLY
                FORBIDDEN: RUSSIAN_OR_OTHER_NON_ENGLISH_LANGUAGES
            TABLE_DRIVEN_TESTS: FOR_METHODS_WITHOUT_COMPLEX_LOGIC_WITH_RETURN_RESULT
            T_RUN_CASES: FOR_OTHER_METHODS (case_name_in_english)
                T_PARALLEL_USAGE: AT_BEGINNING_OF_EACH_CASE_IN_T_RUN
        TEST_CASE_COVERAGE
            ALL_RETURN_PATHS (err != nil, panic)
            BRANCHES_WITH_MOCK_CALLS
            REDUNDANT_CASES_OMITTABLE_IF_NO_BEHAVIORAL_IMPACT
    2.1_INIT_FUNCTION_PROHIBITION
        ABSOLUTE_PROHIBITION: NO_INIT_FUNCTIONS_IN_TEST_FILES (*_test.go)
        RATIONALE:
            INIT_FUNCTIONS_CREATE_UNCONTROLLED_SIDE_EFFECTS
            EXECUTED_ON_PACKAGE_IMPORT_CAN_AFFECT_OTHER_TESTS
            VIOLATES_TEST_ISOLATION_PRINCIPLE
            COMPLICATES_DEBUGGING_AND_EXECUTION_ORDER_UNDERSTANDING
        MANDATORY_ALTERNATIVES:
            SETUP_FUNCTION_INITIALIZATION: ADD_INITIALIZATION_TO_setUp(t_*testing.T)_FUNCTION
            TESTMAIN_FOR_GLOBAL_SETUP: func_TestMain(m_*testing.M)_FOR_PACKAGE_LEVEL_INITIALIZATION
            SYNC_ONCE_FOR_LAZY_INIT: var_(once_sync.Once)_FOR_EXPENSIVE_ONE_TIME_OPERATIONS
        EXAMPLE_FORBIDDEN_PATTERN:
            '''
            func init() {
                // NEVER DO THIS IN TESTS
                loggerV1.InitGlobalLogger(zap.NewNop())
            }
            '''
        EXAMPLE_CORRECT_PATTERN:
            '''
            func setUp(t *testing.T) (*fixture, func()) {
                t.Helper()
                // Initialize here instead of init()
                loggerV1.InitGlobalLogger(zap.NewNop())
                return &fixture{}, func() {}
            }
            '''
    3_DATA_VALIDATION
        ASSERT_PACKAGE: github.com/stretchr/testify/assert (FOR_NON_CRITICAL_CHECKS)
        T_ERRORF: FOR_NON_CRITICAL_CUSTOM_CHECKS (CONTINUES_EXECUTION)
        REQUIRE_PACKAGE: github.com/stretchr/testify/require (FOR_CRITICAL_CHECKS, STOPS_ON_FAIL)
        T_FATALF: FOR_CRITICAL_CUSTOM_CHECKS (STOPS_ON_FAIL)
    4_MOCKS_DETERMINISM
        GOMOCK_USAGE: go.uber.org/mock/gomock
        MOCKGEN_USAGE_COMMAND: '//go:generate mockgen -source=filename.go -destination=./mock/filename.go -package mock'
        MOCK_STORAGE_PATH: ./mock/
        MANUAL_MOCK_EDITING: PROHIBITED
        MOCK_REGENERATION_TRIGGER: INTERFACE_CHANGE_ONLY
        TEST_DETERMINISM: MANDATORY (NO_REAL_EXTERNAL_DEPENDENCIES)
        GOMOCK_ANY_USAGE_RESTRICTION:
            ALLOWED_FOR_CONTEXT_ONLY: WHEN_CONTEXT_DIFFERS_FROM_METHOD_PARAMETER
            ALL_OTHER_PARAMETERS: EXPLICIT_VALUES_MANDATORY
            EXCEPTION: ONLY_IF_EXPLICITLY_REQUESTED_BY_USER
            RATIONALE: DETERMINISTIC_TESTS_REQUIRE_EXACT_PARAMETER_VERIFICATION
    5_FIXTURE_SETUP
        TESTING_TEST_GO_CONTENTS
            FIXTURE_STRUCT_DEFINITION (`fixture`)
                FIELDS_GROUPED_BY_EMPTY_LINE
                    TESTED_OBJECT
                    MOCK_DEPENDENCIES
                    CONFIGS_AUX_DATA
                    CTX_CONTEXT_CONTEXT (IF_NEEDED)
            SETUP_FUNCTION_SIGNATURE: func setUp(t *testing.T) (*fixture, func())
                CREATE_GOMOCK_CONTROLLER: ctrl := gomock.NewController(t)
                CREATE_MOCKS_AND_TESTED_OBJECT
                RETURN_FIXTURE_AND_CLEANUP: return f, func() { ctrl.Finish() }
        SINGLE_FIXTURE_SETUP_PER_STRUCT: TRUE
    6_ASYNC_OPERATIONS_TESTING
        ASYNC_WAIT_TIME_CONSTANTS
            DECLARE_CONST: asyncOperationWaitTime = 100 * time.Millisecond
            LOCATION: PACKAGE_LEVEL_WITH_TEST_CONSTANTS
        CLEANUP_FUNCTION_PATTERN
            SLEEP_IN_CLEANUP: time.Sleep(asyncOperationWaitTime) IN_CLEANUP_FUNC
            MOCK_VERIFICATION_IN_CLEANUP: assert.True(t, gock.IsDone()) IN_CLEANUP_FUNC
            APPLY_WHEN: GOROUTINES_OR_ASYNC_DEPS_EXPECTED
            EXAMPLE_CLEANUP: cleanup := func() { time.Sleep(asyncOperationWaitTime); assert.True(t, gock.IsDone()); gock.Off(); gock.Clean(); gock.RestoreClient(http.DefaultClient) }
        RATIONALE
            DETERMINISTIC_TEST_EXECUTION: WAIT_FOR_GOROUTINES_COMPLETION
            CONSTANTS_CENTRALIZATION: AVOID_MAGIC_NUMBERS_IN_SLEEP_CALLS
            CLEANUP_BENEFITS: CENTRALIZED_TEARDOWN_INCLUDING_ASYNC_WAIT_AND_MOCK_VERIFICATION
    7_DEBUGGING_PROCESS
        ANALYZE_FAILURE_REASON
        VERIFY_TEST_CORRECTNESS_VS_EXPECTED_BEHAVIOR
        FIX_CODE_OR_TEST_CONSCIOUSLY
        AFTER_3_FAILED_ATTEMPTS_STOP_AND_REQUEST_HELP
            HELP_REQUEST_FORMAT: "Я предпринял три попытки исправить [тест/код], но ошибка [описание] сохраняется. Мои гипотезы: […]. Как лучше поступить?"
    8_GOTESTSUM_USAGE_POLICY
        TOOL_PREFERENCE: gotestsum
        COMMAND_FORMAT: "gotestsum --format pkgname --packages=\"$(go list ./...)\""
        PURPOSE: ENHANCED_TEST_OUTPUT_WITH_PACKAGE_NAMES
        MANDATORY_USAGE: WHEN_RUNNING_TESTS_DIRECTLY_OR_AUTOMATION
        ADVANTAGES
            HUMAN_FRIENDLY_OUTPUT
            PACKAGE_NAME_VISIBILITY
            JUNIT_XML_SUPPORT_FOR_CI
            BETTER_ERROR_FORMATTING
            PROGRESS_INDICATION
        FALLBACK: "go test ./..." IF_GOTESTSUM_NOT_AVAILABLE
        
    9_EXAMPLE_CODE_BLOCKS_RETAIN_AS_IS
        CODE_BLOCK_SERVICE_GO
            '''
            // service.go
            
            //go:generate mockgen -source=service.go -destination=./mock/mock.go -package mock
            package payments
            
            import "context"
            
            type storage interface {
                GetUsername(ctx context.Context, id string) (string, error)
                UpdateUsername(ctx context.Context, id, username string) error
            }
            
            type cache interface {
                GetUsername(ctx context.Context, id string) (string, bool)
                UpdateUsername(ctx context.Context, id, username string)
            }
            
            type Service struct {
                storage storage
                cache   cache
            }
            
            func NewService(s storage, c cache) *Service {
                return &Service{storage: s, cache: c}
            }
            '''
        CODE_BLOCK_TESTING_TEST_GO
            '''
            // testing_test.go
            
            package payments_test
            
            import (
                "context"
                "testing"
            
                "github.com/golang/mock/gomock"
                "yourmodule/mock" 
                "yourmodule/payments" 
            )
            
            type fixture struct {
                service     *payments.Service
            
                storageMock *mock.Mockstorage
                cacheMock   *mock.Mockcache
            
                ctx         context.Context
            }
            
            func setUp(t *testing.T) (*fixture, func()) {
                ctrl := gomock.NewController(t)
                storageMock := mock.NewMockstorage(ctrl) 
                cacheMock := mock.NewMockcache(ctrl)     
            
                return &fixture{
                    service:     payments.NewService(storageMock, cacheMock),
            
                    storageMock: storageMock,
                    cacheMock:   cacheMock,
            
                    ctx:         context.Background(),
                }, ctrl.Finish
            }
            '''
        CODE_BLOCK_GET_USERNAME_GO
            '''
            // get_username.go
            
            package payments
            
            import "context"
            
            func (s *Service) GetUsername(ctx context.Context, id string) (string, error) {
                if name, ok := s.cache.GetUsername(ctx, id); ok {
                    return name, nil
                }
            
                name, err := s.storage.GetUsername(ctx, id)
                if err != nil {
                    return "", errfmt.Error(err, "get username from storage failed")
                }
            
                s.cache.UpdateUsername(ctx, id, name)
            
                return name, nil
            }
            '''
        CODE_BLOCK_GET_USERNAME_TEST_GO
            '''
            // get_username_test.go
            
            package payments_test
            
            import (
                "errors"
                "testing"
            
                "github.com/golang/mock/gomock"
                "github.com/stretchr/testify/assert"
                "github.com/stretchr/testify/require"
            )
            
            func TestService_GetUsername(t *testing.T) {
                t.Run("success from cache", func(t *testing.T) {
                    t.Parallel()
                    f, finish := setUp(t)
                    defer finish()
            
                    id := "123"
            
                    username := "john"
                    f.cacheMock.EXPECT().
                        GetUsername(f.ctx, id).
                        Return(username, true).
                        Times(1)
            
                    res, err := f.service.GetUsername(f.ctx, id)
                    require.NoError(t, err)
                    assert.Equal(t, username, res)
                })
            
                t.Run("success from storage", func(t *testing.T) {
                    t.Parallel()
                    f, finish := setUp(t)
                    defer finish()
            
                    id := "123"
            
                    f.cacheMock.EXPECT().
                        GetUsername(f.ctx, id).
                        Return("", false).
                        Times(1)
            
                    userame := "alice" 
                    f.storageMock.EXPECT().
                        GetUsername(f.ctx, id).
                        Return(userame, nil). 
                        Times(1)
            
                    f.cacheMock.EXPECT().
                        UpdateUsername(f.ctx, id, userame). 
                        Times(1)
            
                    got, err := f.service.GetUsername(f.ctx, id)
                    require.NoError(t, err)
                    assert.Equal(t, userame, got) 
                })
            
                t.Run("error from storage", func(t *testing.T) {
                    t.Parallel()
                    f, finish := setUp(t)
                    defer finish()
            
                    id := "123"
            
                    f.cacheMock.EXPECT().
                        GetUsername(f.ctx, id).
                        Return("", false).
                        Times(1)
            
                    expectedErr := errors.New("random error")
                    f.storageMock.EXPECT().
                        GetUsername(f.ctx, id).
                        Return("", expectedErr).
                        Times(1)
            
                    res, err := f.service.GetUsername(f.ctx, "123")
                    require.ErrorIs(t, err, expectedErr)
                    require.Empty(t, res)
                })
            }
            '''
        CODE_BLOCK_UPDATE_USERNAME_GO
            '''
            // update_username.go
            
            package payments
            
            import "context"
            
            func (s *Service) UpdateUsername(ctx context.Context, id, username string) error {
                if err := s.storage.UpdateUsername(ctx, id, username); err != nil {
                    return err
                }
            
                s.cache.UpdateUsername(ctx, id, username)
            
                return nil
            }
            '''
        CODE_BLOCK_UPDATE_USERNAME_TEST_GO
            '''
            // update_username_test.go
            
            package payments_test
            
            import (
                "errors"
                "testing"
            
                "github.com/golang/mock/gomock"
                "github.com/stretchr/testify/require"
            )
            
            func TestService_UpdateUsername(t *testing.T) {
                t.Run("success", func(t *testing.T) {
                    t.Parallel()
                    f, finish := setUp(t)
                    defer finish()
            
                    id := "123"
                    username := "bob"
            
                    f.storageMock.EXPECT().
                        UpdateUsername(f.ctx, id, username).
                        Return(nil).
                        Times(1)
            
                    f.cacheMock.EXPECT().
                        UpdateUsername(f.ctx, id, username).
                        Times(1)
            
                    err := f.service.UpdateUsername(f.ctx, id, username)
                    require.NoError(t, err)
                })
            
                t.Run("error from storage", func(t *testing.T) {
                    t.Parallel()
                    f, finish := setUp(t)
                    defer finish()
            
                    id := "123"
                    username := "bob"
            
                    expectedErr := errors.New("update failed")
                    f.storageMock.EXPECT().
                        UpdateUsername(f.ctx, id, username).
                        Return(expectedErr).
                        Times(1)
            
                    err := f.service.UpdateUsername(f.ctx, id, username)
                    require.ErrorIs(t, err, expectedErr)
                })
            }
            '''
