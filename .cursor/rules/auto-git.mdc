---
description: 
globs: 
alwaysApply: false
---
GIT_AUTOMATION_MANDATORY_WORKFLOW
    TRIGGERS: "подготовь коммит", "сделай коммит", "commit"
    EXECUTION_MODE: IMMEDIATE_AUTO_EXECUTION_ON_TRIGGER_MATCH
    OVERRIDE_WORKSPACE_RULE: HIGH_RISK_ACTION_CONFIRMATION_FOR_GIT_OPERATIONS
    
MANDATORY_EXECUTION_SEQUENCE:
    
1. ANALYZE_CHANGED_FILES_MANDATORY
    ALWAYS_EXECUTE: git status --porcelain
    NEVER_SKIP: true
    PURPOSE: identify modified, added, deleted, renamed files
    
    GITIGNORE_CHECK_MANDATORY:
        ALWAYS_EXECUTE: git check-ignore --stdin < <(git status --porcelain | cut -c4-)
        PURPOSE: exclude files that match .gitignore patterns
        FILTER_OUT: any files returned by git check-ignore
        NEVER_STAGE_IGNORED_FILES: true
    
2. GO_AUTOMATION_PIPELINE_MANDATORY
    CONDITION: IF_GO_FILES_DETECTED
    REFERENCE_RULES: auto-go.mdc
    ALWAYS_AUTO_FIX: ALL_ERRORS_WITHOUT_USER_CONFIRMATION
    MAX_ITERATIONS: 3_PER_STAGE
    SKIP_FILE_PATTERNS: [".md", ".txt", ".yml", ".yaml", "vendor/", "node_modules/", "*_generated.go"]
    EXECUTION_REQUIREMENT: MANDATORY_UNLESS_SKIPPED_PATTERNS
    
    SEQUENCE_VALIDATION_MANDATORY:
        NEVER_PROCEED_TO_STEP_3_WITHOUT_STEP_2_COMPLETION: true
        GO_FILES_DETECTION: git status --porcelain | grep '\.go$'
        IF_GO_FILES_FOUND: ALWAYS_EXECUTE_GO_AUTOMATION_BEFORE_COMMIT
        AUTO_GO_TOOLS_REQUIRED:
            CHANGED_FILES_DETECTION: git diff --cached --name-only --diff-filter=ACMR | grep '\.go$'
            GOIMPORTS_COMMAND: goimports -w $(CHANGED_FILES_DETECTION)
            GOLANGCI_COMMAND: golangci-lint run --timeout=2m || echo "Linting issues found - proceeding with commit"
            GO_MOD_TIDY: go mod tidy
        COMPLETION_VALIDATION: IGNORE_EXISTING_PROJECT_LINTING_ERRORS_FOCUS_ON_CHANGED_FILES_ONLY
        LINTING_POLICY: BEST_EFFORT_DO_NOT_BLOCK_COMMITS_FOR_EXISTING_ISSUES
    
3. COMMIT_MESSAGE_FORMATION_MANDATORY
    PREREQUISITE_CHECK: STEP_1_AND_STEP_2_COMPLETED_SUCCESSFULLY
    
    BRANCH_EXTRACTION_REQUIRED:
        ALWAYS_EXECUTE: git branch --show-current | grep -o '^MRC-[0-9]\+' || echo "TASK"
        PATTERN_EXTRACTION: ^(MRC-[0-9]+) → $1
        FALLBACK_PREFIX: "TASK"
        EXAMPLES:
            "MRC-73299-nuvei" → "MRC-73299"
            "MRC-12345-feature-auth" → "MRC-12345"  
            "bugfix/fix-login" → "TASK"
            "main" → "TASK"
    
    GIT_MESSAGE_FORMAT_STANDARDS_MANDATORY:
        FIRST_LINE_SUBJECT:
            STRUCTURE: "[BRANCH_PREFIX]: [short description]"
            MAX_LENGTH: 50_CHARACTERS_STRICT
            LANGUAGE: ENGLISH_ONLY_MANDATORY
            STYLE: imperative_mood
            NO_PERIOD_AT_END: true
            CONCISE_DESCRIPTION: focus on WHAT not HOW
            EXAMPLES:
                "MRC-73299: add Nuvei rates caching"
                "MRC-12345: implement user auth"
                "TASK: fix memory leak"
        
        MULTILINE_FORMAT_WHEN_COMPLEX:
            TRIGGER: IF_CHANGES_EXCEED_5_FILES_OR_MAJOR_FEATURE
            STRUCTURE: 
                LINE_1: "[SUBJECT_50_CHARS_MAX]"
                LINE_2: ""  # MANDATORY_EMPTY_LINE
                LINE_3+: "- [concise bullet point]"
            BODY_CONSTRAINTS:
                WRAP_AT: 72_CHARACTERS_PER_LINE
                BULLET_STYLE: "- " (dash + space)
                MAX_BULLETS: 5
                EACH_BULLET_MAX: 60_CHARACTERS
                FOCUS: key changes only, no implementation details
                
        PROHIBITED_FORMATS:
            NEVER_SINGLE_LINE_OVER_50_CHARS: true
            NEVER_ALL_CAPS: true
            NEVER_RUSSIAN_IN_SUBJECT: true
            NEVER_TRAILING_PERIODS: true
            NEVER_CONCATENATED_LONG_STRING: true
            NEVER_IMPLEMENTATION_DETAILS: true
            NEVER_OVERLY_VERBOSE: true
            
        COMMIT_COMMAND_FORMAT:
            SIMPLE_COMMIT: git commit -m "[SUBJECT]"
            MULTILINE_COMMIT: git commit -m "[SUBJECT]" -m "" -m "- [BODY_LINE_1]" -m "- [BODY_LINE_2]"
            
    QUALITY_VALIDATION_MANDATORY:
        SUBJECT_LENGTH_CHECK: FAIL_IF_OVER_50_CHARS
        PREFIX_CHECK: ENSURE_BRANCH_PREFIX_EXTRACTED_CORRECTLY
        CONCISENESS_CHECK: REJECT_IF_TOO_VERBOSE_OR_DETAILED
        
4. COMMIT_AND_PUSH_MANDATORY
    PREREQUISITE_CHECK: ALL_PREVIOUS_STEPS_COMPLETED_AND_VALIDATED
    NEVER_EXECUTE_WITHOUT_STEP_2_COMPLETION: true
    
    STAGING_REQUIRED: git add . --ignore-errors
    GITIGNORE_RESPECT: git reset HEAD -- $(git check-ignore * 2>/dev/null || true)
    COMMIT_REQUIRED: git commit -m "[FORMED_MESSAGE]"
    PUSH_REQUIRED: git push origin [CURRENT_BRANCH]
    ERROR_HANDLING: REPORT_BUT_CONTINUE_WORKFLOW
    SUCCESS_CONFIRMATION: ALWAYS_DISPLAY_FINAL_STATUS

SEQUENCE_ENFORCEMENT_MANDATORY:
    NEVER_SKIP_STEPS: true
    NEVER_PROCEED_WITHOUT_VALIDATION: true
    ALWAYS_COMPLETE_IN_ORDER: 1→2→3→4
    FAILURE_RECOVERY: STOP_AND_REPORT_SPECIFIC_STEP_ERROR
    
AUTOMATION_ENFORCEMENT:
    NEVER_ASK_PERMISSION: true
    NEVER_STOP_WORKFLOW: true
    NEVER_WAIT_FOR_USER_CONFIRMATION: true
    ALWAYS_COMPLETE_ALL_4_STEPS: true
    DISPLAY_PROGRESS: each_step_with_emoji_status
    
SPECIAL_CASES_HANDLING:
    NO_CHANGES_DETECTED: 
        ACTION: IMMEDIATE_MESSAGE("Нет изменений для коммита")
        STOP_WORKFLOW: true
    NON_GO_FILES_ONLY: 
        ACTION: SKIP_STEP_2_CONTINUE_TO_STEP_3
    GIT_ERRORS:
        ACTION: REPORT_ERROR_AND_SUGGEST_MANUAL_INTERVENTION
        
ERROR_RECOVERY:
    COMMIT_CONFLICT: DISPLAY_CONFLICT_RESOLUTION_STEPS
    PUSH_REJECTED: SUGGEST_PULL_REBASE_RETRY
    
WORKFLOW_PRINCIPLES:
    SPEED: MAXIMUM_AUTOMATION_MINIMUM_DELAYS
    RELIABILITY: ALWAYS_COMPLETE_SUCCESSFULLY_OR_REPORT_SPECIFIC_ERROR  
    TRANSPARENCY: SHOW_EACH_STEP_EXECUTION_STATUS
    CONSISTENCY: SAME_BEHAVIOR_EVERY_TIME
