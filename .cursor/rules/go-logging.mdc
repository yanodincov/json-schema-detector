---
description: 
globs: 
alwaysApply: false
---
# GO_LOGGING_INTEGRATION ⚡ **GO_ONLY**

PURPOSE: **ПРАВИЛА ТОЛЬКО ДЛЯ GO КОДА** - интеграция ZAP логгера с обязательным маскированием чувствительных данных.

1. LOGGER_INTEGRATION_POLICY
    PRIMARY_LOGGER: ZAP_LOGGER_MANDATORY
    STRUCT_INTEGRATION:
        LOGGER_AS_STRUCT_PROPERTY: MANDATORY_ZAP_LOGGER_FIELD
        CONSTRUCTOR_INJECTION: INCLUDE_LOGGER_IN_ALL_CONSTRUCTORS
        PROPERTY_NAME: logger (CONSISTENT_NAMING)
    STATIC_METHODS_USAGE:
        USAGE_AFTER_NEWENTRY: USE_AS_REGULAR_ZAP_LOGGER
    CONTEXT_LOGGING_METHODS:
        INFO: logger.Info(ctx, "message", fields...)
        WARN: logger.Warn(ctx, "message", fields...)
        ERROR: logger.Error(ctx, "message", fields...)
        DEBUG: logger.Debug(ctx, "message", fields...)
    ZAP_FIELD_TYPES_REFERENCE:
        STRINGS: zap.String("key", val), zap.ByteString("key", []byte)
        NUMBERS: zap.Int("key", val), zap.Int64, zap.Uint64, zap.Float64, zap.Float32
        TEMPORAL: zap.Bool, zap.Time, zap.Duration
        SPECIAL: zap.Error(err), zap.Any("key", val)
        ARRAYS: zap.Strings, zap.Ints
        PREFER_TYPED_OVER_ANY: TRUE

2. ERROR_LOGGING_POLICY
    LOG_LEVEL_SELECTION:
        UNEXPECTED_ERRORS: ERROR_LEVEL
        BUSINESS_LOGIC_ERRORS: WARN_LEVEL
    TRIGGER_MOMENTS:
        ERROR_INITIALIZATION: LOG_WHEN_CREATING_NEW_ERROR
        ERROR_CATCHING: LOG_WHEN_CATCHING_FROM_EXTERNAL_SERVICE
    LOG_CONTENT: INCLUDE_ERROR_OBJECT_IN_LOG_ENTRY

3. SUCCESS_LOGGING_POLICY
    SUCCESS_COMPLETION_LOGGING: INFO_LEVEL_MANDATORY
    SCOPE_COVERAGE:
        SERVICE_METHODS: LOG_SUCCESSFUL_COMPLETION
        CLIENT_OPERATIONS: LOG_SUCCESSFUL_COMPLETION
        EXTERNAL_REQUESTS: LOG_SUCCESSFUL_EXTERNAL_API_CALLS
        REQUEST_PROCESSING: LOG_SUCCESSFUL_COMPLETION

4. LOG_DATA_INCLUSION_POLICY
    AUXILIARY_DATA: INCLUDE_HELPFUL_CONTEXT_DATA
    SENSITIVE_DATA_DEFINITION:
        USER_DATA_FORBIDDEN: names, addresses, birth_dates, documents, cards, accounts, phones, emails, biometric, geolocation, secrets
        RAW_DATA_FORBIDDEN: json_strings, xml_strings, base64_strings, unparsed_data (POTENTIALLY_CONTAINS_SENSITIVE_INFO)
        TECHNICAL_DATA_ALLOWED: system_ids, external_ids, statuses, operation_types, currencies, amounts, timestamps, api_versions
    PROPERTY_LIMIT: MAX_5_PROPERTIES_PER_LOG
    STRUCTURES_WITH_SENSITIVE_DATA: USE_ONLY_WITH_MASK_METHOD

5. DATA_MASKING_POLICY
    STRUCT_MASK_METHOD_PRIORITY:
        MASK_METHOD_EXISTS: ALWAYS_USE_ENTIRE_STRUCT_WITH_MASK_METHOD_NEVER_INDIVIDUAL_FIELDS
        NO_MASK_METHOD: SUGGEST_MASK_METHOD_GENERATION_BEFORE_LOGGING
        EXTERNAL_STRUCTS: CREATE_STATIC_MASK_FUNCTION_FOR_EXTERNAL_TYPES
    MASK_METHOD_GENERATION:
        INTERNAL_STRUCTS: ADD_MASK_METHOD_TO_STRUCT
        EXTERNAL_STRUCTS: CREATE_STATIC_MASK_FUNCTION
        NESTED_STRUCTS: CALL_MASK_METHOD_ON_NESTED_STRUCTS
        RETURN_TYPE_RULE: MASK_METHOD_MUST_RETURN_SAME_TYPE_AS_RECEIVER
    AVAILABLE_MASK_FUNCTIONS:
        FULL_MASKING: mask.Full(val), mask.Empty(val), mask.Fixed(val)
        PARTIAL_MASKING: mask.Holder(val), mask.Email(val), mask.Phone(val)
        FINANCIAL_DATA: mask.Pan(val), mask.Cvv(val), mask.Secret(val)
        DATE_COMPONENTS: mask.Month(val), mask.Year(val)

6. LOGGING_EXAMPLES
    STRUCT_WITH_LOGGER:
        '''
        type Service struct {
            logger *zap.Logger
            repo   Repository
        }
        
        func NewService(logger *zap.Logger, repo Repository) *Service {
            return &Service{logger: logger, repo: repo}
        }
        '''
    STATIC_METHOD_LOGGING:
        '''
        func ProcessPayment(ctx context.Context) error {
            logger := logger.NewEntry().Zap()
            logger.Info(ctx, "processing payment started")
            
            return nil
        }
        '''
    ERROR_LOGGING:
        '''
        if err != nil {
            s.logger.Error(ctx, "payment processing failed", zap.Error(err), zap.String("payment_id", id))
            
            return errfmt.Error(err, "payment processing failed")
        }
        '''
    SUCCESS_LOGGING:
        '''
        s.logger.Info(ctx, "payment processed successfully", 
            zap.String("payment_id", payment.ID),
            zap.String("status", payment.Status))
        '''
    MASKED_LOGGING_CORRECT:
        '''
        s.logger.Info(ctx, "user data processed", zap.Any("user", user.Mask()))
        '''
    MASKED_LOGGING_INCORRECT:
        '''
        // NEVER DO THIS IF MASK METHOD EXISTS:
        s.logger.Info(ctx, "user data processed",
            zap.String("user_id", user.ID),
            zap.String("email", mask.Email(user.Email)))
        '''
    EXTERNAL_STRUCT_MASKING:
        '''
        func maskExternalUser(user external.User) map[string]interface{} {
            return map[string]interface{}{
                "id": user.ID,
                "email": mask.Email(user.Email),
            }
        }
        s.logger.Info(ctx, "external user processed", zap.Any("user", maskExternalUser(externalUser)))
        '''
