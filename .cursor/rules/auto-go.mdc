---
description: 
globs: 
alwaysApply: false
---
1. GO_VERSION_MANAGEMENT_POLICY
    VERSION_SOURCE: GO_MOD_FILE_PARSING
    VERSION_PARSE_COMMAND: "grep \"^go \" go.mod | cut -d' ' -f2"
    CURRENT_PROJECT_GO_VERSION: "1.24.2"
    
    ONE_TIME_ACTIVATION_COMMAND: "gvm use go$(grep \"^go \" go.mod | cut -d' ' -f2)"
    ACTIVATION_RULE: SINGLE_GVM_USE_AT_REQUEST_START_NOT_AS_PREFIX
    
    EXECUTION_PROTOCOL
        STEP_1_ACTIVATION_TRIGGERS
            GO_FILE_MENTIONS: GO_FILES_IN_REQUEST_CONTEXT
            GO_COMMANDS_DETECTED: go_test_go_fmt_goimports_golangci_lint
            GO_DEVELOPMENT_KEYWORDS: imports_formatting_lint_tests
            ACTIVATION_CONDITION: ANY_OF_ABOVE_TRIGGERS_DETECTED
            
        STEP_2_VERSION_DETECTION
            PARSE_COMMAND: grep "^go " go.mod | cut -d' ' -f2
            FALLBACK_VERSION: USE_CURRENT_PROJECT_GO_VERSION_IF_PARSE_FAILS
            NO_GO_VERSION_FILE_CREATION: TRUE
            
        STEP_3_GVM_VERSION_CHECK
            COMMAND: "gvm list | grep -q {detected_version}"
            ON_SUCCESS: PROCEED_TO_STEP_4
            ON_FAILURE: PROCEED_TO_GVM_INSTALL
            
        STEP_4_GVM_INSTALL_IF_NEEDED
            COMMAND: "gvm install go{detected_version}"
            CONDITION: IF_VERSION_NOT_FOUND_IN_STEP_3
            ERROR_HANDLING: REPORT_INSTALL_FAILURE_AND_CONTINUE
            
        STEP_5_ONE_TIME_GVM_USE
            COMMAND: "gvm use go{detected_version}"
            EXECUTION_TIMING: ONCE_AT_REQUEST_START
            ERROR_HANDLING: REPORT_BUT_CONTINUE_TERMINAL_COMMANDS
            
    COMMAND_INTEGRATION
        ONE_TIME_ACTIVATION: EXECUTE_BEFORE_FIRST_GO_COMMAND_ONLY
        NO_PREFIX_PATTERN: EXECUTE_GO_COMMANDS_WITHOUT_GVM_PREFIX_AFTER_ACTIVATION
        SILENT_EXECUTION: TRUE
        CACHE_VERSION_FOR_SESSION: TRUE
        
    EXCEPTION_CONDITIONS
        NON_GO_RELATED_COMMANDS: SKIP_ONE_TIME_GVM_ACTIVATION
        GVM_NOT_INSTALLED: WARN_USER_AND_CONTINUE_WITHOUT_ACTIVATION
        GO_MOD_NOT_FOUND: USE_SYSTEM_DEFAULT_GO_WITHOUT_ACTIVATION
        GVM_ALREADY_ACTIVATED_IN_SESSION: SKIP_REPEATED_ACTIVATION
        
    PERFORMANCE_OPTIMIZATION
        VERSION_CACHE_DURATION: SESSION_LIFETIME
        SKIP_CHECK_IF_ALREADY_USING_CORRECT_VERSION: TRUE
        BATCH_COMMANDS_USE_SAME_VERSION: TRUE
        
    ERROR_REPORTING
        GVM_INSTALL_FAILURE: DETAILED_ERROR_WITH_MANUAL_INSTALL_SUGGESTION
        VERSION_PARSE_FAILURE: FALLBACK_TO_SYSTEM_GO_WITH_WARNING
        GVM_ONE_TIME_ACTIVATION_FAILURE: WARNING_WITH_CURRENT_VERSION_INFO
        REPEATED_ACTIVATION_ATTEMPT: INFORMATIONAL_MESSAGE_ABOUT_SKIP

2. CODE_QUALITY_THREE_STAGE_PIPELINE_POLICY
    TRIGGER_EVENT: AFTER_EACH_GO_FILE_EDIT_OR_CREATION
    EXECUTION_SEQUENCE: GVM_ONE_TIME_ACTIVATION_THEN_TESTING_AND_GO_FMT_THEN_GOIMPORTS_THEN_GOLANGCI_LINT
    MANDATORY_ORDER: GVM_ACTIVATION → STAGE_1 → STAGE_2 → STAGE_3
    
    PRELIMINARY_STAGE_GVM_ACTIVATION
        PURPOSE: ONE_TIME_GO_VERSION_ACTIVATION_FOR_REQUEST
        EXECUTION_TIMING: ONCE_AT_START_OF_GO_REQUEST_PROCESSING
        COMMAND: "gvm use go$(grep \"^go \" go.mod | cut -d' ' -f2)"
        CONDITIONAL_EXECUTION: ONLY_IF_GO_TRIGGERS_DETECTED
    
    STAGE_1_TESTING_AND_GO_FMT
        PURPOSE: TEST_EXECUTION_ERROR_FIXING_AND_BASIC_FORMATTING
        
        TESTING_PHASE
            BASE_COMMAND: "gotestsum --format pkgname --packages=\"$(go list ./...)\""
            EXECUTION_AFTER_GVM_ACTIVATION: "gotestsum --format pkgname --packages=\"$(go list ./...)\""
            FALLBACK_COMMAND: "go test ./..." IF_GOTESTSUM_NOT_AVAILABLE
            ERROR_FIXING_POLICY
                COMPILATION_ERRORS: IMMEDIATE_FIX_IMPORTS_TYPES
                LOGICAL_TEST_ERRORS: FIX_EXPECTATIONS_MOCKS_AND_RERUN
                MAX_ITERATIONS: 3
            STOP_CONDITIONS
                TEST_FAILURES: HALT_PIPELINE_UNTIL_FIXED
                CRITICAL_COMPILATION_ERRORS: IMMEDIATE_STOP_AND_REPORT
                ITERATION_LIMIT_EXCEEDED: REPORT_TO_USER
        
        GO_FMT_PHASE
            BASE_COMMAND: "go fmt ./..."
            PURPOSE: BASIC_CODE_FORMATTING
            EXECUTION_AFTER_GVM_ACTIVATION
                SINGLE_FILE: "go fmt filepath"
                DIRECTORY: "go fmt ./path/to/dir/..."
                WHOLE_PROJECT: "go fmt ./..."
            TIMING: AFTER_TEST_ERROR_FIXES
        
        AUTO_FIX_PATTERNS_STAGE_1
            TEST_COMPILATION_ERRORS: FIX_IMPORTS_TYPES
            BROKEN_TESTS: UPDATE_EXPECTATIONS_MOCKS
            FORMATTING_ISSUES: GO_FMT_HANDLES_BASIC_PROBLEMS
        
        EXCEPTION_HANDLING
            NO_TESTS_FOUND: WARNING_BUT_CONTINUE_TO_STAGE_2
            TEST_FILES_NOT_COMPILING: MANDATORY_FIX_BEFORE_PROCEEDING
    
    STAGE_2_GOIMPORTS
        PURPOSE: IMPORT_ORGANIZATION_AND_ADVANCED_FORMATTING
        BASE_COMMAND: "goimports -w"
        APPLICATION_SCOPE: MODIFIED_GO_FILES_ONLY
        IMPORT_GROUPING_STANDARD: 4_GROUPS_STANDARD
            GROUP_1: STANDARD_LIBRARY_PACKAGES
            GROUP_2: PROJECT_INTERNAL_PACKAGES (payments/internal/...)
            GROUP_4: THIRD_PARTY_PACKAGES (all_other_external_packages)
        EXECUTION_METHOD_AFTER_GVM_ACTIVATION
            SINGLE_FILE: goimports  -w filepath
            MULTIPLE_FILES: - -w file1 file2 file3
            DIRECTORY_PATTERN: find ./path/to/dir -name "*.go" -exec goimports -w {} \;
        MANDATORY_EXECUTION: TRUE
        PREREQUISITE: STAGE_1_COMPLETION
        
    STAGE_3_GOLANGCI_LINT
        PURPOSE: FINAL_CODE_QUALITY_CHECKS
        WORKING_DIRECTORY: PROJECT_ROOT
        BASE_COMMAND: "golangci-lint run --config .golangci.yml"
        CONFIG_SOURCE: .golangci.yml
        APPLICATION_SCOPE: MODIFIED_FILES_OR_DIRECTORIES
        EXECUTION_METHOD_AFTER_GVM_ACTIVATION
            SINGLE_FILE: golangci-lint run --config .golangci.yml filepath
            MULTIPLE_FILES: golangci-lint run --config .golangci.yml file1 file2 file3
            DIRECTORY_PATTERN: golangci-lint run --config .golangci.yml ./path/to/dir/...
        ERROR_HANDLING: AUTO_FIX_IF_POSSIBLE
        PREREQUISITE: STAGE_2_COMPLETION
        
        AUTO_FIX_PATTERNS_STAGE_3
            UNUSED_PARAMETERS: REPLACE_WITH_UNDERSCORE (_)
            UNUSED_VARIABLES: REPLACE_WITH_UNDERSCORE (_var)
            IMPORT_FORMATTING: ALREADY_HANDLED_BY_GOIMPORTS_IN_STAGE_2
            WHITESPACE_ISSUES: AUTO_TRIM
        
    EXECUTION_LIMITS
        MAX_ITERATIONS_PER_STAGE: 3
        ON_ITERATION_LIMIT: REPORT_TO_USER_WITH_REMAINING_ISSUES
        CRITICAL_ERRORS_ONLY: STOP_AND_REPORT_IMMEDIATELY
        
    EXCEPTION_CONDITIONS
        NON_GO_FILES: SKIP_ALL_STAGES
        READ_ONLY_OPERATIONS: SKIP_ALL_STAGES
        USER_EXPLICIT_OPT_OUT_REQUEST: ALLOW
        NO_TESTS_FOUND: WARNING_BUT_CONTINUE_FROM_STAGE_2
        
    REPORTING
        SUCCESS: SILENT_OR_BRIEF_CONFIRMATION_WITH_TEST_COUNT
        
        STAGE_1_FAILURES
            DETAILED_TEST_ERROR_LIST
            FAILED_TEST_STATISTICS
            GO_FMT_FORMATTING_ERRORS
            
        STAGE_2_FAILURES
            DETAILED_GOIMPORTS_ERROR_LIST_WITH_IMPORT_GROUPING_ISSUES
            
        STAGE_3_FAILURES
            DETAILED_LINT_ERROR_LIST_WITH_FILE_LOCATIONS
            
        PERFORMANCE
            EXECUTION_TIME_PER_STAGE
            TOTAL_PIPELINE_EXECUTION_TIME

    PIPELINE_FLOW_CONTROL
        STAGE_1_GATE: TESTS_MUST_PASS_BEFORE_STAGE_2
        STAGE_2_GATE: IMPORTS_MUST_BE_CLEAN_BEFORE_STAGE_3
        ROLLBACK_POLICY: ON_CRITICAL_FAILURE_STOP_AND_PRESERVE_STATE
        CONTINUE_POLICY: MINOR_WARNINGS_ALLOW_CONTINUATION
