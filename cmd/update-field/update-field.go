package updatefield

import (
	"bufio"
	"fmt"
	"os"
	"strings"

	"github.com/spf13/cobra"
	"github.com/yanodincov/json-ai-schema-detector/pkg/analyzer"
	"github.com/yanodincov/json-ai-schema-detector/pkg/fieldmanager"
	"github.com/yanodincov/json-ai-schema-detector/pkg/types"
)

var (
	interactive bool
	fieldType   string
	description string
)

// Cmd –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—É update-field
var Cmd = &cobra.Command{
	Use:   "update-field [schema.json] [json-path] [type]",
	Short: "–û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª–µ –≤ —Å—Ö–µ–º–µ (enum, polymorph, description)",
	Long: `–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª–µ –≤ JSON Schema, –ø–æ–∑–≤–æ–ª—è—è:
- –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –ø–æ–ª–µ –≤ enum —Ç–∏–ø —Å –≤—ã–±–æ—Ä–æ–º –∑–Ω–∞—á–µ–Ω–∏–π
- –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –ø–æ–ª–µ –≤ –ø–æ–ª–∏–º–æ—Ä—Ñ–Ω—ã–π —Ç–∏–ø —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
- –î–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—è
- –ò–∑–º–µ–Ω–∏—Ç—å —Ç–∏–ø –ø–æ–ª—è

–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  update-field schema.json "data.0.role" enum
  update-field schema.json "data.0.user" polymorph
  update-field schema.json "data.0.id" description`,
	Args: cobra.MinimumNArgs(2),
	RunE: runUpdateField,
}

func init() {
	Cmd.Flags().BoolVarP(&interactive, "interactive", "i", true, "–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º")
	Cmd.Flags().StringVarP(&fieldType, "type", "t", "", "–¢–∏–ø –ø–æ–ª—è (enum, polymorph, description)")
	Cmd.Flags().StringVarP(&description, "description", "d", "", "–û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—è")
}

func runUpdateField(cmd *cobra.Command, args []string) error {
	schemaFile := args[0]
	jsonPath := args[1]

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏
	operation := fieldType
	if len(args) >= 3 {
		operation = args[2]
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å—Ö–µ–º—ã
	if _, err := os.Stat(schemaFile); os.IsNotExist(err) {
		return fmt.Errorf("—Ñ–∞–π–ª —Å—Ö–µ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω: %s", schemaFile)
	}

	fmt.Printf("üîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è –≤ —Å—Ö–µ–º–µ\n")
	fmt.Printf("üìÑ –§–∞–π–ª —Å—Ö–µ–º—ã: %s\n", schemaFile)
	fmt.Printf("üéØ –ü—É—Ç—å –∫ –ø–æ–ª—é: %s\n", jsonPath)
	fmt.Printf("üîÑ –û–ø–µ—Ä–∞—Ü–∏—è: %s\n", operation)
	fmt.Println()

	// –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ö–µ–º—É
	analyzer := analyzer.New(types.DefaultConfig())
	schema, err := analyzer.LoadSchema(schemaFile)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ö–µ–º—ã: %w", err)
	}

	// –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–ª–µ–π
	fieldManager := fieldmanager.New()

	// –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
	switch operation {
	case "enum":
		err = handleEnumConversion(fieldManager, schema, jsonPath)
	case "polymorph", "polymorphic":
		err = handlePolymorphicConversion(fieldManager, schema, jsonPath)
	case "description", "desc":
		err = handleDescriptionUpdate(fieldManager, schema, jsonPath)
	case "preserve-default", "preserve":
		err = handlePreserveDefaultUpdate(fieldManager, schema, jsonPath)
	default:
		if interactive {
			operation, err = promptOperation()
			if err != nil {
				return err
			}
			return runUpdateField(cmd, append(args[:2], operation))
		}
		return fmt.Errorf("–Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è: %s. –î–æ—Å—Ç—É–ø–Ω—ã–µ: enum, polymorph, description, preserve-default", operation)
	}

	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—è: %w", err)
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ö–µ–º—É
	if err := analyzer.SaveSchema(schema, schemaFile); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ö–µ–º—ã: %w", err)
	}

	fmt.Printf("‚úÖ –ü–æ–ª–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: %s\n", jsonPath)
	return nil
}

func handleEnumConversion(fm *fieldmanager.FieldManager, schema *types.AnalysisResult, jsonPath string) error {
	fmt.Printf("üéØ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ø–æ–ª—è –≤ enum —Ç–∏–ø\n")
	fmt.Printf("–ü—É—Ç—å: %s\n", jsonPath)
	fmt.Println()

	// –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª–µ –ø–æ –ø—É—Ç–∏
	field, err := fm.FindField(schema.Schema, jsonPath)
	if err != nil {
		return fmt.Errorf("–ø–æ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: %w", err)
	}

	if field.Type != "string" {
		return fmt.Errorf("–ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ enum –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è string –ø–æ–ª–µ–π, —Ç–µ–∫—É—â–∏–π —Ç–∏–ø: %s", field.Type)
	}

	// –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤–≤–æ–¥ –∑–Ω–∞—á–µ–Ω–∏–π enum
	fmt.Printf("üìù –í–≤–µ–¥–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è enum (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É):\n")
	fmt.Printf("üí° –ó–∞–∫–æ–Ω—á–∏—Ç–µ –≤–≤–æ–¥ –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π\n")
	fmt.Println()

	scanner := bufio.NewScanner(os.Stdin)
	var enumValues []interface{}

	for {
		fmt.Print("–ó–Ω–∞—á–µ–Ω–∏–µ: ")
		if !scanner.Scan() {
			break
		}

		value := strings.TrimSpace(scanner.Text())
		if value == "" {
			break
		}

		enumValues = append(enumValues, value)
	}

	if len(enumValues) == 0 {
		return fmt.Errorf("–Ω–µ –≤–≤–µ–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è enum")
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ
	field.Enum = enumValues

	// –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
	if interactive {
		fmt.Print("üìù –û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ): ")
		if scanner.Scan() {
			desc := strings.TrimSpace(scanner.Text())
			if desc != "" {
				field.Description = desc
			}
		}
	}

	fmt.Printf("‚úÖ –ü–æ–ª–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ –≤ enum —Å %d –∑–Ω–∞—á–µ–Ω–∏—è–º–∏\n", len(enumValues))
	fmt.Printf("üéØ –ó–Ω–∞—á–µ–Ω–∏—è: %v\n", enumValues)

	return nil
}

func handlePolymorphicConversion(fm *fieldmanager.FieldManager, schema *types.AnalysisResult, jsonPath string) error {
	fmt.Printf("üéØ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ø–æ–ª—è –≤ –ø–æ–ª–∏–º–æ—Ä—Ñ–Ω—ã–π —Ç–∏–ø\n")
	fmt.Printf("–ü—É—Ç—å: %s\n", jsonPath)
	fmt.Println()

	// –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª–µ –ø–æ –ø—É—Ç–∏
	field, err := fm.FindField(schema.Schema, jsonPath)
	if err != nil {
		return fmt.Errorf("–ø–æ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: %w", err)
	}

	if field.Type != "object" {
		return fmt.Errorf("–ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ –ø–æ–ª–∏–º–æ—Ä—Ñ–Ω—ã–π —Ç–∏–ø –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è object –ø–æ–ª–µ–π, —Ç–µ–∫—É—â–∏–π —Ç–∏–ø: %s", field.Type)
	}

	fmt.Printf("üìù –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–∏–º–æ—Ä—Ñ–Ω–æ–≥–æ —Ç–∏–ø–∞\n")
	fmt.Printf("üí° –í–≤–µ–¥–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–ª–∏–º–æ—Ä—Ñ–Ω–æ–≥–æ —Ç–∏–ø–∞\n")
	fmt.Println()

	scanner := bufio.NewScanner(os.Stdin)
	var variants []*types.JSONSchema

	for {
		fmt.Print("–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞ (–∏–ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è): ")
		if !scanner.Scan() {
			break
		}

		variantName := strings.TrimSpace(scanner.Text())
		if variantName == "" {
			break
		}

		// –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
		variant := &types.JSONSchema{
			Type:        "object",
			Properties:  make(map[string]*types.Property),
			Description: fmt.Sprintf("–í–∞—Ä–∏–∞–Ω—Ç %s", variantName),
		}

		// –î–æ–±–∞–≤–ª—è–µ–º –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–æ—Ä
		variant.Properties["type"] = &types.Property{
			Type: "string",
			Enum: []interface{}{variantName},
		}

		variants = append(variants, variant)
		fmt.Printf("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –≤–∞—Ä–∏–∞–Ω—Ç: %s\n", variantName)
	}

	if len(variants) == 0 {
		return fmt.Errorf("–Ω–µ —Å–æ–∑–¥–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞")
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ –∫–∞–∫ oneOf
	field.OneOf = variants
	field.Type = "" // –£–±–∏—Ä–∞–µ–º –±–∞–∑–æ–≤—ã–π —Ç–∏–ø

	fmt.Printf("‚úÖ –ü–æ–ª–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ –≤ –ø–æ–ª–∏–º–æ—Ä—Ñ–Ω—ã–π —Ç–∏–ø —Å %d –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏\n", len(variants))

	return nil
}

func handlePreserveDefaultUpdate(fm *fieldmanager.FieldManager, schema *types.AnalysisResult, jsonPath string) error {
	fmt.Printf("üîí –ó–∞—â–∏—Ç–∞ default –∑–Ω–∞—á–µ–Ω–∏—è –æ—Ç –ø–µ—Ä–µ–∑–∞—Ç–∏—Ä–∞–Ω–∏—è\n")
	fmt.Printf("–ü—É—Ç—å: %s\n", jsonPath)
	fmt.Println()

	// –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª–µ –ø–æ –ø—É—Ç–∏
	field, err := fm.FindField(schema.Schema, jsonPath)
	if err != nil {
		return fmt.Errorf("–ø–æ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: %w", err)
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞—â–∏—Ç—É –æ—Ç –ø–µ—Ä–µ–∑–∞—Ç–∏—Ä–∞–Ω–∏—è
	field.PreserveDefault = true

	if field.Default != nil {
		fmt.Printf("‚úÖ Default –∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞—â–∏—â–µ–Ω–æ: %v\n", field.Default)
	} else {
		fmt.Printf("‚ö†Ô∏è Default –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –Ω–æ –∑–∞—â–∏—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞\n")
		fmt.Printf("üí° –ü—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∞–Ω–∞–ª–∏–∑–µ default –±—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω –∏ –∑–∞—â–∏—â–µ–Ω\n")
	}

	fmt.Printf("‚úÖ –ü–æ–ª–µ –∑–∞—â–∏—â–µ–Ω–æ –æ—Ç –ø–µ—Ä–µ–∑–∞—Ç–∏—Ä–∞–Ω–∏—è default: %s\n", jsonPath)
	return nil
}

func handleDescriptionUpdate(fm *fieldmanager.FieldManager, schema *types.AnalysisResult, jsonPath string) error {
	fmt.Printf("üéØ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ–ª—è\n")
	fmt.Printf("–ü—É—Ç—å: %s\n", jsonPath)
	fmt.Println()

	// –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª–µ –ø–æ –ø—É—Ç–∏
	field, err := fm.FindField(schema.Schema, jsonPath)
	if err != nil {
		return fmt.Errorf("–ø–æ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: %w", err)
	}

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
	if field.Description != "" {
		fmt.Printf("üìÑ –¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: %s\n", field.Description)
	} else {
		fmt.Printf("üìÑ –¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n")
	}

	// –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è
	fmt.Print("üìù –ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: ")
	scanner := bufio.NewScanner(os.Stdin)
	if scanner.Scan() {
		newDesc := strings.TrimSpace(scanner.Text())
		if newDesc != "" {
			field.Description = newDesc
			fmt.Printf("‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: %s\n", newDesc)
		} else {
			fmt.Printf("‚ö†Ô∏è –ü—É—Å—Ç–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ –≤–Ω–µ—Å–µ–Ω—ã\n")
		}
	}

	return nil
}

func promptOperation() (string, error) {
	fmt.Printf("üéØ –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é:\n")
	fmt.Printf("1. enum - –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ enum —Ç–∏–ø\n")
	fmt.Printf("2. polymorph - –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ –ø–æ–ª–∏–º–æ—Ä—Ñ–Ω—ã–π —Ç–∏–ø\n")
	fmt.Printf("3. description - –æ–±–Ω–æ–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ\n")
	fmt.Printf("4. preserve-default - –∑–∞—â–∏—Ç–∏—Ç—å default –æ—Ç –ø–µ—Ä–µ–∑–∞—Ç–∏—Ä–∞–Ω–∏—è\n")
	fmt.Print("–í–∞—à –≤—ã–±–æ—Ä (1-4): ")

	scanner := bufio.NewScanner(os.Stdin)
	if scanner.Scan() {
		choice := strings.TrimSpace(scanner.Text())
		switch choice {
		case "1":
			return "enum", nil
		case "2":
			return "polymorph", nil
		case "3":
			return "description", nil
		case "4":
			return "preserve-default", nil
		default:
			return "", fmt.Errorf("–Ω–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä: %s", choice)
		}
	}

	return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –≤–≤–æ–¥–∞")
}
