package listfields

import (
	"fmt"
	"os"
	"sort"

	"github.com/spf13/cobra"
	"github.com/yanodincov/json-ai-schema-detector/pkg/analyzer"
	"github.com/yanodincov/json-ai-schema-detector/pkg/fieldmanager"
)

var (
	showTypes bool
	verbose   bool
)

// Cmd –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—É list-fields
var Cmd = &cobra.Command{
	Use:   "list-fields [schema.json]",
	Short: "–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª–µ–π –≤ —Å—Ö–µ–º–µ",
	Long: `–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª–µ–π –≤ JSON Schema —Å –∏—Ö –ø—É—Ç—è–º–∏.
–ü–æ–ª–µ–∑–Ω–æ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ JSON Path –¥–ª—è –∫–æ–º–∞–Ω–¥—ã update-field.

–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  list-fields schema.json
  list-fields schema.json --types
  list-fields schema.json --verbose`,
	Args: cobra.ExactArgs(1),
	RunE: runListFields,
}

func init() {
	Cmd.Flags().BoolVarP(&showTypes, "types", "t", false, "–ü–æ–∫–∞–∑–∞—Ç—å —Ç–∏–ø—ã –ø–æ–ª–µ–π")
	Cmd.Flags().BoolVarP(&verbose, "verbose", "v", false, "–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥")
}

func runListFields(cmd *cobra.Command, args []string) error {
	schemaFile := args[0]

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å—Ö–µ–º—ã
	if _, err := os.Stat(schemaFile); os.IsNotExist(err) {
		return fmt.Errorf("—Ñ–∞–π–ª —Å—Ö–µ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω: %s", schemaFile)
	}

	fmt.Printf("üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª–µ–π –≤ —Å—Ö–µ–º–µ: %s\n", schemaFile)
	fmt.Println()

	// –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ö–µ–º—É
	analyzer := analyzer.New()
	schema, err := analyzer.LoadSchema(schemaFile)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ö–µ–º—ã: %w", err)
	}

	// –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–ª–µ–π
	fieldManager := fieldmanager.New()

	// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª–µ–π
	fields := fieldManager.ListFields(schema.Schema)

	if len(fields) == 0 {
		fmt.Println("‚ö†Ô∏è –ü–æ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Å—Ö–µ–º–µ")
		return nil
	}

	// –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–ª—è –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
	sort.Strings(fields)

	fmt.Printf("üéØ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ–π: %d\n", len(fields))
	fmt.Println()

	// –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª–µ–π
	for i, fieldPath := range fields {
		fmt.Printf("%3d. %s", i+1, fieldPath)

		if showTypes || verbose {
			// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª–µ
			field, err := fieldManager.FindField(schema.Schema, fieldPath)
			if err == nil {
				fmt.Printf(" (%s)", field.Type)

				if verbose {
					// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
					if field.Description != "" {
						fmt.Printf(" - %s", field.Description)
					}

					if field.Enum != nil {
						fmt.Printf(" [enum: %v]", field.Enum)
					}

					if field.OneOf != nil {
						fmt.Printf(" [polymorphic: %d variants]", len(field.OneOf))
					}
				}
			}
		}

		fmt.Println()
	}

	fmt.Println()
	fmt.Printf("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—É—Ç–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ —Å –∫–æ–º–∞–Ω–¥–æ–π update-field:\n")
	fmt.Printf("   ./json-schema-detector update-field %s \"<path>\" <operation>\n", schemaFile)
	fmt.Println()

	return nil
}
